// soc_audio.v

// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module soc_audio (
		input  wire        audio_BCLK,                   //          audio.BCLK
		output wire        audio_DACDAT,                 //               .DACDAT
		input  wire        audio_DACLRCK,                //               .DACLRCK
		input  wire [3:0]  buttons_export,               //        buttons.export
		input  wire        clk_clk,                      //            clk.clk
		inout  wire        hps_io_hps_io_sdio_inst_CMD,  //         hps_io.hps_io_sdio_inst_CMD
		inout  wire        hps_io_hps_io_sdio_inst_D0,   //               .hps_io_sdio_inst_D0
		inout  wire        hps_io_hps_io_sdio_inst_D1,   //               .hps_io_sdio_inst_D1
		output wire        hps_io_hps_io_sdio_inst_CLK,  //               .hps_io_sdio_inst_CLK
		inout  wire        hps_io_hps_io_sdio_inst_D2,   //               .hps_io_sdio_inst_D2
		inout  wire        hps_io_hps_io_sdio_inst_D3,   //               .hps_io_sdio_inst_D3
		input  wire        hps_io_hps_io_uart0_inst_RX,  //               .hps_io_uart0_inst_RX
		output wire        hps_io_hps_io_uart0_inst_TX,  //               .hps_io_uart0_inst_TX
		input  wire        hps_io_hps_io_uart0_inst_CTS, //               .hps_io_uart0_inst_CTS
		output wire        hps_io_hps_io_uart0_inst_RTS, //               .hps_io_uart0_inst_RTS
		output wire [12:0] memory_mem_a,                 //         memory.mem_a
		output wire [2:0]  memory_mem_ba,                //               .mem_ba
		output wire        memory_mem_ck,                //               .mem_ck
		output wire        memory_mem_ck_n,              //               .mem_ck_n
		output wire        memory_mem_cke,               //               .mem_cke
		output wire        memory_mem_cs_n,              //               .mem_cs_n
		output wire        memory_mem_ras_n,             //               .mem_ras_n
		output wire        memory_mem_cas_n,             //               .mem_cas_n
		output wire        memory_mem_we_n,              //               .mem_we_n
		output wire        memory_mem_reset_n,           //               .mem_reset_n
		inout  wire [31:0] memory_mem_dq,                //               .mem_dq
		inout  wire [3:0]  memory_mem_dqs,               //               .mem_dqs
		inout  wire [3:0]  memory_mem_dqs_n,             //               .mem_dqs_n
		output wire        memory_mem_odt,               //               .mem_odt
		output wire [3:0]  memory_mem_dm,                //               .mem_dm
		input  wire        memory_oct_rzqin,             //               .oct_rzqin
		input  wire        reset_reset_n,                //          reset.reset_n
		output wire [27:0] seven_segments_export         // seven_segments.export
	);

	wire   [1:0] axi_bridge_m0_awburst;                                           // AXI_BRIDGE:m0_awburst -> HPS:f2h_sdram0_AWBURST
	wire   [3:0] axi_bridge_m0_arlen;                                             // AXI_BRIDGE:m0_arlen -> HPS:f2h_sdram0_ARLEN
	wire   [7:0] axi_bridge_m0_wstrb;                                             // AXI_BRIDGE:m0_wstrb -> HPS:f2h_sdram0_WSTRB
	wire         axi_bridge_m0_wready;                                            // HPS:f2h_sdram0_WREADY -> AXI_BRIDGE:m0_wready
	wire   [7:0] axi_bridge_m0_rid;                                               // HPS:f2h_sdram0_RID -> AXI_BRIDGE:m0_rid
	wire         axi_bridge_m0_rready;                                            // AXI_BRIDGE:m0_rready -> HPS:f2h_sdram0_RREADY
	wire   [3:0] axi_bridge_m0_awlen;                                             // AXI_BRIDGE:m0_awlen -> HPS:f2h_sdram0_AWLEN
	wire   [7:0] axi_bridge_m0_wid;                                               // AXI_BRIDGE:m0_wid -> HPS:f2h_sdram0_WID
	wire   [3:0] axi_bridge_m0_arcache;                                           // AXI_BRIDGE:m0_arcache -> HPS:f2h_sdram0_ARCACHE
	wire         axi_bridge_m0_wvalid;                                            // AXI_BRIDGE:m0_wvalid -> HPS:f2h_sdram0_WVALID
	wire  [31:0] axi_bridge_m0_araddr;                                            // AXI_BRIDGE:m0_araddr -> HPS:f2h_sdram0_ARADDR
	wire   [2:0] axi_bridge_m0_arprot;                                            // AXI_BRIDGE:m0_arprot -> HPS:f2h_sdram0_ARPROT
	wire   [2:0] axi_bridge_m0_awprot;                                            // AXI_BRIDGE:m0_awprot -> HPS:f2h_sdram0_AWPROT
	wire  [63:0] axi_bridge_m0_wdata;                                             // AXI_BRIDGE:m0_wdata -> HPS:f2h_sdram0_WDATA
	wire         axi_bridge_m0_arvalid;                                           // AXI_BRIDGE:m0_arvalid -> HPS:f2h_sdram0_ARVALID
	wire   [3:0] axi_bridge_m0_awcache;                                           // AXI_BRIDGE:m0_awcache -> HPS:f2h_sdram0_AWCACHE
	wire   [7:0] axi_bridge_m0_arid;                                              // AXI_BRIDGE:m0_arid -> HPS:f2h_sdram0_ARID
	wire   [1:0] axi_bridge_m0_arlock;                                            // AXI_BRIDGE:m0_arlock -> HPS:f2h_sdram0_ARLOCK
	wire   [1:0] axi_bridge_m0_awlock;                                            // AXI_BRIDGE:m0_awlock -> HPS:f2h_sdram0_AWLOCK
	wire  [31:0] axi_bridge_m0_awaddr;                                            // AXI_BRIDGE:m0_awaddr -> HPS:f2h_sdram0_AWADDR
	wire   [1:0] axi_bridge_m0_bresp;                                             // HPS:f2h_sdram0_BRESP -> AXI_BRIDGE:m0_bresp
	wire         axi_bridge_m0_arready;                                           // HPS:f2h_sdram0_ARREADY -> AXI_BRIDGE:m0_arready
	wire  [63:0] axi_bridge_m0_rdata;                                             // HPS:f2h_sdram0_RDATA -> AXI_BRIDGE:m0_rdata
	wire         axi_bridge_m0_awready;                                           // HPS:f2h_sdram0_AWREADY -> AXI_BRIDGE:m0_awready
	wire   [1:0] axi_bridge_m0_arburst;                                           // AXI_BRIDGE:m0_arburst -> HPS:f2h_sdram0_ARBURST
	wire   [2:0] axi_bridge_m0_arsize;                                            // AXI_BRIDGE:m0_arsize -> HPS:f2h_sdram0_ARSIZE
	wire         axi_bridge_m0_bready;                                            // AXI_BRIDGE:m0_bready -> HPS:f2h_sdram0_BREADY
	wire         axi_bridge_m0_rlast;                                             // HPS:f2h_sdram0_RLAST -> AXI_BRIDGE:m0_rlast
	wire         axi_bridge_m0_wlast;                                             // AXI_BRIDGE:m0_wlast -> HPS:f2h_sdram0_WLAST
	wire   [1:0] axi_bridge_m0_rresp;                                             // HPS:f2h_sdram0_RRESP -> AXI_BRIDGE:m0_rresp
	wire   [7:0] axi_bridge_m0_awid;                                              // AXI_BRIDGE:m0_awid -> HPS:f2h_sdram0_AWID
	wire   [7:0] axi_bridge_m0_bid;                                               // HPS:f2h_sdram0_BID -> AXI_BRIDGE:m0_bid
	wire         axi_bridge_m0_bvalid;                                            // HPS:f2h_sdram0_BVALID -> AXI_BRIDGE:m0_bvalid
	wire   [2:0] axi_bridge_m0_awsize;                                            // AXI_BRIDGE:m0_awsize -> HPS:f2h_sdram0_AWSIZE
	wire         axi_bridge_m0_awvalid;                                           // AXI_BRIDGE:m0_awvalid -> HPS:f2h_sdram0_AWVALID
	wire         axi_bridge_m0_rvalid;                                            // HPS:f2h_sdram0_RVALID -> AXI_BRIDGE:m0_rvalid
	wire         audio_clock_audio_clk_clk;                                       // AUDIO_CLOCK:audio_clk_clk -> [AUDIO:clk, irq_synchronizer:receiver_clk, mm_interconnect_0:AUDIO_CLOCK_audio_clk_clk, rst_controller_001:clk]
	wire         pll_sdram_clk_clk;                                               // PLL:sdram_clk_clk -> [AXI_BRIDGE:aclk, HPS:f2h_sdram0_clk, mm_interconnect_1:PLL_sdram_clk_clk, rst_controller_002:clk]
	wire         pll_sys_clk_clk;                                                 // PLL:sys_clk_clk -> HPS:h2f_lw_axi_clk
	wire  [31:0] nios_data_master_readdata;                                       // mm_interconnect_0:NIOS_data_master_readdata -> NIOS:d_readdata
	wire         nios_data_master_waitrequest;                                    // mm_interconnect_0:NIOS_data_master_waitrequest -> NIOS:d_waitrequest
	wire         nios_data_master_debugaccess;                                    // NIOS:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:NIOS_data_master_debugaccess
	wire  [18:0] nios_data_master_address;                                        // NIOS:d_address -> mm_interconnect_0:NIOS_data_master_address
	wire   [3:0] nios_data_master_byteenable;                                     // NIOS:d_byteenable -> mm_interconnect_0:NIOS_data_master_byteenable
	wire         nios_data_master_read;                                           // NIOS:d_read -> mm_interconnect_0:NIOS_data_master_read
	wire         nios_data_master_write;                                          // NIOS:d_write -> mm_interconnect_0:NIOS_data_master_write
	wire  [31:0] nios_data_master_writedata;                                      // NIOS:d_writedata -> mm_interconnect_0:NIOS_data_master_writedata
	wire  [31:0] nios_instruction_master_readdata;                                // mm_interconnect_0:NIOS_instruction_master_readdata -> NIOS:i_readdata
	wire         nios_instruction_master_waitrequest;                             // mm_interconnect_0:NIOS_instruction_master_waitrequest -> NIOS:i_waitrequest
	wire  [18:0] nios_instruction_master_address;                                 // NIOS:i_address -> mm_interconnect_0:NIOS_instruction_master_address
	wire         nios_instruction_master_read;                                    // NIOS:i_read -> mm_interconnect_0:NIOS_instruction_master_read
	wire         mm_interconnect_0_audio_avalon_audio_slave_chipselect;           // mm_interconnect_0:AUDIO_avalon_audio_slave_chipselect -> AUDIO:chipselect
	wire  [31:0] mm_interconnect_0_audio_avalon_audio_slave_readdata;             // AUDIO:readdata -> mm_interconnect_0:AUDIO_avalon_audio_slave_readdata
	wire   [1:0] mm_interconnect_0_audio_avalon_audio_slave_address;              // mm_interconnect_0:AUDIO_avalon_audio_slave_address -> AUDIO:address
	wire         mm_interconnect_0_audio_avalon_audio_slave_read;                 // mm_interconnect_0:AUDIO_avalon_audio_slave_read -> AUDIO:read
	wire         mm_interconnect_0_audio_avalon_audio_slave_write;                // mm_interconnect_0:AUDIO_avalon_audio_slave_write -> AUDIO:write
	wire  [31:0] mm_interconnect_0_audio_avalon_audio_slave_writedata;            // mm_interconnect_0:AUDIO_avalon_audio_slave_writedata -> AUDIO:writedata
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;        // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_chipselect -> JTAG_UART:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;          // JTAG_UART:av_readdata -> mm_interconnect_0:JTAG_UART_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest;       // JTAG_UART:av_waitrequest -> mm_interconnect_0:JTAG_UART_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;           // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_address -> JTAG_UART:av_address
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;              // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_read -> JTAG_UART:av_read_n
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;             // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_write -> JTAG_UART:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;         // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_writedata -> JTAG_UART:av_writedata
	wire  [63:0] mm_interconnect_0_address_extender_cntl_readdata;                // ADDRESS_EXTENDER:avs_cntl_readdata -> mm_interconnect_0:ADDRESS_EXTENDER_cntl_readdata
	wire         mm_interconnect_0_address_extender_cntl_read;                    // mm_interconnect_0:ADDRESS_EXTENDER_cntl_read -> ADDRESS_EXTENDER:avs_cntl_read
	wire   [7:0] mm_interconnect_0_address_extender_cntl_byteenable;              // mm_interconnect_0:ADDRESS_EXTENDER_cntl_byteenable -> ADDRESS_EXTENDER:avs_cntl_byteenable
	wire         mm_interconnect_0_address_extender_cntl_write;                   // mm_interconnect_0:ADDRESS_EXTENDER_cntl_write -> ADDRESS_EXTENDER:avs_cntl_write
	wire  [63:0] mm_interconnect_0_address_extender_cntl_writedata;               // mm_interconnect_0:ADDRESS_EXTENDER_cntl_writedata -> ADDRESS_EXTENDER:avs_cntl_writedata
	wire  [31:0] mm_interconnect_0_nios_debug_mem_slave_readdata;                 // NIOS:debug_mem_slave_readdata -> mm_interconnect_0:NIOS_debug_mem_slave_readdata
	wire         mm_interconnect_0_nios_debug_mem_slave_waitrequest;              // NIOS:debug_mem_slave_waitrequest -> mm_interconnect_0:NIOS_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_nios_debug_mem_slave_debugaccess;              // mm_interconnect_0:NIOS_debug_mem_slave_debugaccess -> NIOS:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_nios_debug_mem_slave_address;                  // mm_interconnect_0:NIOS_debug_mem_slave_address -> NIOS:debug_mem_slave_address
	wire         mm_interconnect_0_nios_debug_mem_slave_read;                     // mm_interconnect_0:NIOS_debug_mem_slave_read -> NIOS:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_nios_debug_mem_slave_byteenable;               // mm_interconnect_0:NIOS_debug_mem_slave_byteenable -> NIOS:debug_mem_slave_byteenable
	wire         mm_interconnect_0_nios_debug_mem_slave_write;                    // mm_interconnect_0:NIOS_debug_mem_slave_write -> NIOS:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_nios_debug_mem_slave_writedata;                // mm_interconnect_0:NIOS_debug_mem_slave_writedata -> NIOS:debug_mem_slave_writedata
	wire         mm_interconnect_0_ram_s1_chipselect;                             // mm_interconnect_0:RAM_s1_chipselect -> RAM:chipselect
	wire  [31:0] mm_interconnect_0_ram_s1_readdata;                               // RAM:readdata -> mm_interconnect_0:RAM_s1_readdata
	wire  [11:0] mm_interconnect_0_ram_s1_address;                                // mm_interconnect_0:RAM_s1_address -> RAM:address
	wire   [3:0] mm_interconnect_0_ram_s1_byteenable;                             // mm_interconnect_0:RAM_s1_byteenable -> RAM:byteenable
	wire         mm_interconnect_0_ram_s1_write;                                  // mm_interconnect_0:RAM_s1_write -> RAM:write
	wire  [31:0] mm_interconnect_0_ram_s1_writedata;                              // mm_interconnect_0:RAM_s1_writedata -> RAM:writedata
	wire         mm_interconnect_0_ram_s1_clken;                                  // mm_interconnect_0:RAM_s1_clken -> RAM:clken
	wire         mm_interconnect_0_seven_segments_s1_chipselect;                  // mm_interconnect_0:SEVEN_SEGMENTS_s1_chipselect -> SEVEN_SEGMENTS:chipselect
	wire  [31:0] mm_interconnect_0_seven_segments_s1_readdata;                    // SEVEN_SEGMENTS:readdata -> mm_interconnect_0:SEVEN_SEGMENTS_s1_readdata
	wire   [1:0] mm_interconnect_0_seven_segments_s1_address;                     // mm_interconnect_0:SEVEN_SEGMENTS_s1_address -> SEVEN_SEGMENTS:address
	wire         mm_interconnect_0_seven_segments_s1_write;                       // mm_interconnect_0:SEVEN_SEGMENTS_s1_write -> SEVEN_SEGMENTS:write_n
	wire  [31:0] mm_interconnect_0_seven_segments_s1_writedata;                   // mm_interconnect_0:SEVEN_SEGMENTS_s1_writedata -> SEVEN_SEGMENTS:writedata
	wire  [31:0] mm_interconnect_0_buttons_s1_readdata;                           // BUTTONS:readdata -> mm_interconnect_0:BUTTONS_s1_readdata
	wire   [1:0] mm_interconnect_0_buttons_s1_address;                            // mm_interconnect_0:BUTTONS_s1_address -> BUTTONS:address
	wire         mm_interconnect_0_timer_s1_chipselect;                           // mm_interconnect_0:TIMER_s1_chipselect -> TIMER:chipselect
	wire  [15:0] mm_interconnect_0_timer_s1_readdata;                             // TIMER:readdata -> mm_interconnect_0:TIMER_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_s1_address;                              // mm_interconnect_0:TIMER_s1_address -> TIMER:address
	wire         mm_interconnect_0_timer_s1_write;                                // mm_interconnect_0:TIMER_s1_write -> TIMER:write_n
	wire  [15:0] mm_interconnect_0_timer_s1_writedata;                            // mm_interconnect_0:TIMER_s1_writedata -> TIMER:writedata
	wire  [31:0] mm_interconnect_0_address_extender_windowed_slave_readdata;      // ADDRESS_EXTENDER:avs_s0_readdata -> mm_interconnect_0:ADDRESS_EXTENDER_windowed_slave_readdata
	wire         mm_interconnect_0_address_extender_windowed_slave_waitrequest;   // ADDRESS_EXTENDER:avs_s0_waitrequest -> mm_interconnect_0:ADDRESS_EXTENDER_windowed_slave_waitrequest
	wire  [15:0] mm_interconnect_0_address_extender_windowed_slave_address;       // mm_interconnect_0:ADDRESS_EXTENDER_windowed_slave_address -> ADDRESS_EXTENDER:avs_s0_address
	wire         mm_interconnect_0_address_extender_windowed_slave_read;          // mm_interconnect_0:ADDRESS_EXTENDER_windowed_slave_read -> ADDRESS_EXTENDER:avs_s0_read
	wire   [3:0] mm_interconnect_0_address_extender_windowed_slave_byteenable;    // mm_interconnect_0:ADDRESS_EXTENDER_windowed_slave_byteenable -> ADDRESS_EXTENDER:avs_s0_byteenable
	wire         mm_interconnect_0_address_extender_windowed_slave_readdatavalid; // ADDRESS_EXTENDER:avs_s0_readdatavalid -> mm_interconnect_0:ADDRESS_EXTENDER_windowed_slave_readdatavalid
	wire         mm_interconnect_0_address_extender_windowed_slave_write;         // mm_interconnect_0:ADDRESS_EXTENDER_windowed_slave_write -> ADDRESS_EXTENDER:avs_s0_write
	wire  [31:0] mm_interconnect_0_address_extender_windowed_slave_writedata;     // mm_interconnect_0:ADDRESS_EXTENDER_windowed_slave_writedata -> ADDRESS_EXTENDER:avs_s0_writedata
	wire   [0:0] mm_interconnect_0_address_extender_windowed_slave_burstcount;    // mm_interconnect_0:ADDRESS_EXTENDER_windowed_slave_burstcount -> ADDRESS_EXTENDER:avs_s0_burstcount
	wire         address_extender_expanded_master_waitrequest;                    // mm_interconnect_1:ADDRESS_EXTENDER_expanded_master_waitrequest -> ADDRESS_EXTENDER:avm_m0_waitrequest
	wire  [31:0] address_extender_expanded_master_readdata;                       // mm_interconnect_1:ADDRESS_EXTENDER_expanded_master_readdata -> ADDRESS_EXTENDER:avm_m0_readdata
	wire  [31:0] address_extender_expanded_master_address;                        // ADDRESS_EXTENDER:avm_m0_address -> mm_interconnect_1:ADDRESS_EXTENDER_expanded_master_address
	wire         address_extender_expanded_master_read;                           // ADDRESS_EXTENDER:avm_m0_read -> mm_interconnect_1:ADDRESS_EXTENDER_expanded_master_read
	wire   [3:0] address_extender_expanded_master_byteenable;                     // ADDRESS_EXTENDER:avm_m0_byteenable -> mm_interconnect_1:ADDRESS_EXTENDER_expanded_master_byteenable
	wire         address_extender_expanded_master_readdatavalid;                  // mm_interconnect_1:ADDRESS_EXTENDER_expanded_master_readdatavalid -> ADDRESS_EXTENDER:avm_m0_readdatavalid
	wire         address_extender_expanded_master_write;                          // ADDRESS_EXTENDER:avm_m0_write -> mm_interconnect_1:ADDRESS_EXTENDER_expanded_master_write
	wire  [31:0] address_extender_expanded_master_writedata;                      // ADDRESS_EXTENDER:avm_m0_writedata -> mm_interconnect_1:ADDRESS_EXTENDER_expanded_master_writedata
	wire   [0:0] address_extender_expanded_master_burstcount;                     // ADDRESS_EXTENDER:avm_m0_burstcount -> mm_interconnect_1:ADDRESS_EXTENDER_expanded_master_burstcount
	wire   [1:0] mm_interconnect_1_axi_bridge_s0_awburst;                         // mm_interconnect_1:AXI_BRIDGE_s0_awburst -> AXI_BRIDGE:s0_awburst
	wire   [3:0] mm_interconnect_1_axi_bridge_s0_arlen;                           // mm_interconnect_1:AXI_BRIDGE_s0_arlen -> AXI_BRIDGE:s0_arlen
	wire   [7:0] mm_interconnect_1_axi_bridge_s0_wstrb;                           // mm_interconnect_1:AXI_BRIDGE_s0_wstrb -> AXI_BRIDGE:s0_wstrb
	wire         mm_interconnect_1_axi_bridge_s0_wready;                          // AXI_BRIDGE:s0_wready -> mm_interconnect_1:AXI_BRIDGE_s0_wready
	wire   [7:0] mm_interconnect_1_axi_bridge_s0_rid;                             // AXI_BRIDGE:s0_rid -> mm_interconnect_1:AXI_BRIDGE_s0_rid
	wire         mm_interconnect_1_axi_bridge_s0_rready;                          // mm_interconnect_1:AXI_BRIDGE_s0_rready -> AXI_BRIDGE:s0_rready
	wire   [3:0] mm_interconnect_1_axi_bridge_s0_awlen;                           // mm_interconnect_1:AXI_BRIDGE_s0_awlen -> AXI_BRIDGE:s0_awlen
	wire   [7:0] mm_interconnect_1_axi_bridge_s0_wid;                             // mm_interconnect_1:AXI_BRIDGE_s0_wid -> AXI_BRIDGE:s0_wid
	wire   [3:0] mm_interconnect_1_axi_bridge_s0_arcache;                         // mm_interconnect_1:AXI_BRIDGE_s0_arcache -> AXI_BRIDGE:s0_arcache
	wire         mm_interconnect_1_axi_bridge_s0_wvalid;                          // mm_interconnect_1:AXI_BRIDGE_s0_wvalid -> AXI_BRIDGE:s0_wvalid
	wire  [31:0] mm_interconnect_1_axi_bridge_s0_araddr;                          // mm_interconnect_1:AXI_BRIDGE_s0_araddr -> AXI_BRIDGE:s0_araddr
	wire   [2:0] mm_interconnect_1_axi_bridge_s0_arprot;                          // mm_interconnect_1:AXI_BRIDGE_s0_arprot -> AXI_BRIDGE:s0_arprot
	wire   [2:0] mm_interconnect_1_axi_bridge_s0_awprot;                          // mm_interconnect_1:AXI_BRIDGE_s0_awprot -> AXI_BRIDGE:s0_awprot
	wire  [63:0] mm_interconnect_1_axi_bridge_s0_wdata;                           // mm_interconnect_1:AXI_BRIDGE_s0_wdata -> AXI_BRIDGE:s0_wdata
	wire         mm_interconnect_1_axi_bridge_s0_arvalid;                         // mm_interconnect_1:AXI_BRIDGE_s0_arvalid -> AXI_BRIDGE:s0_arvalid
	wire   [3:0] mm_interconnect_1_axi_bridge_s0_awcache;                         // mm_interconnect_1:AXI_BRIDGE_s0_awcache -> AXI_BRIDGE:s0_awcache
	wire   [7:0] mm_interconnect_1_axi_bridge_s0_arid;                            // mm_interconnect_1:AXI_BRIDGE_s0_arid -> AXI_BRIDGE:s0_arid
	wire   [1:0] mm_interconnect_1_axi_bridge_s0_arlock;                          // mm_interconnect_1:AXI_BRIDGE_s0_arlock -> AXI_BRIDGE:s0_arlock
	wire   [1:0] mm_interconnect_1_axi_bridge_s0_awlock;                          // mm_interconnect_1:AXI_BRIDGE_s0_awlock -> AXI_BRIDGE:s0_awlock
	wire  [31:0] mm_interconnect_1_axi_bridge_s0_awaddr;                          // mm_interconnect_1:AXI_BRIDGE_s0_awaddr -> AXI_BRIDGE:s0_awaddr
	wire   [1:0] mm_interconnect_1_axi_bridge_s0_bresp;                           // AXI_BRIDGE:s0_bresp -> mm_interconnect_1:AXI_BRIDGE_s0_bresp
	wire         mm_interconnect_1_axi_bridge_s0_arready;                         // AXI_BRIDGE:s0_arready -> mm_interconnect_1:AXI_BRIDGE_s0_arready
	wire  [63:0] mm_interconnect_1_axi_bridge_s0_rdata;                           // AXI_BRIDGE:s0_rdata -> mm_interconnect_1:AXI_BRIDGE_s0_rdata
	wire         mm_interconnect_1_axi_bridge_s0_awready;                         // AXI_BRIDGE:s0_awready -> mm_interconnect_1:AXI_BRIDGE_s0_awready
	wire   [1:0] mm_interconnect_1_axi_bridge_s0_arburst;                         // mm_interconnect_1:AXI_BRIDGE_s0_arburst -> AXI_BRIDGE:s0_arburst
	wire   [2:0] mm_interconnect_1_axi_bridge_s0_arsize;                          // mm_interconnect_1:AXI_BRIDGE_s0_arsize -> AXI_BRIDGE:s0_arsize
	wire         mm_interconnect_1_axi_bridge_s0_bready;                          // mm_interconnect_1:AXI_BRIDGE_s0_bready -> AXI_BRIDGE:s0_bready
	wire         mm_interconnect_1_axi_bridge_s0_rlast;                           // AXI_BRIDGE:s0_rlast -> mm_interconnect_1:AXI_BRIDGE_s0_rlast
	wire         mm_interconnect_1_axi_bridge_s0_wlast;                           // mm_interconnect_1:AXI_BRIDGE_s0_wlast -> AXI_BRIDGE:s0_wlast
	wire   [1:0] mm_interconnect_1_axi_bridge_s0_rresp;                           // AXI_BRIDGE:s0_rresp -> mm_interconnect_1:AXI_BRIDGE_s0_rresp
	wire   [7:0] mm_interconnect_1_axi_bridge_s0_awid;                            // mm_interconnect_1:AXI_BRIDGE_s0_awid -> AXI_BRIDGE:s0_awid
	wire   [7:0] mm_interconnect_1_axi_bridge_s0_bid;                             // AXI_BRIDGE:s0_bid -> mm_interconnect_1:AXI_BRIDGE_s0_bid
	wire         mm_interconnect_1_axi_bridge_s0_bvalid;                          // AXI_BRIDGE:s0_bvalid -> mm_interconnect_1:AXI_BRIDGE_s0_bvalid
	wire   [2:0] mm_interconnect_1_axi_bridge_s0_awsize;                          // mm_interconnect_1:AXI_BRIDGE_s0_awsize -> AXI_BRIDGE:s0_awsize
	wire         mm_interconnect_1_axi_bridge_s0_awvalid;                         // mm_interconnect_1:AXI_BRIDGE_s0_awvalid -> AXI_BRIDGE:s0_awvalid
	wire         mm_interconnect_1_axi_bridge_s0_rvalid;                          // AXI_BRIDGE:s0_rvalid -> mm_interconnect_1:AXI_BRIDGE_s0_rvalid
	wire         irq_mapper_receiver1_irq;                                        // TIMER:irq -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                                        // JTAG_UART:av_irq -> irq_mapper:receiver2_irq
	wire  [31:0] nios_irq_irq;                                                    // irq_mapper:sender_irq -> NIOS:irq
	wire         irq_mapper_receiver0_irq;                                        // irq_synchronizer:sender_irq -> irq_mapper:receiver0_irq
	wire   [0:0] irq_synchronizer_receiver_irq;                                   // AUDIO:irq -> irq_synchronizer:receiver_irq
	wire         rst_controller_reset_out_reset;                                  // rst_controller:reset_out -> [ADDRESS_EXTENDER:reset, BUTTONS:reset_n, JTAG_UART:rst_n, NIOS:reset_n, RAM:reset, SEVEN_SEGMENTS:reset_n, TIMER:reset_n, irq_mapper:reset, irq_synchronizer:sender_reset, mm_interconnect_0:NIOS_reset_reset_bridge_in_reset_reset, mm_interconnect_1:ADDRESS_EXTENDER_reset_reset_bridge_in_reset_reset, rst_translator:in_reset]
	wire         rst_controller_reset_out_reset_req;                              // rst_controller:reset_req -> [NIOS:reset_req, RAM:reset_req, rst_translator:reset_req_in]
	wire         rst_controller_001_reset_out_reset;                              // rst_controller_001:reset_out -> [AUDIO:reset, irq_synchronizer:receiver_reset, mm_interconnect_0:AUDIO_reset_reset_bridge_in_reset_reset]
	wire         audio_clock_reset_source_reset;                                  // AUDIO_CLOCK:reset_source_reset -> rst_controller_001:reset_in0
	wire         rst_controller_002_reset_out_reset;                              // rst_controller_002:reset_out -> [AXI_BRIDGE:aresetn, mm_interconnect_1:AXI_BRIDGE_clk_reset_reset_bridge_in_reset_reset]
	wire         pll_reset_source_reset;                                          // PLL:reset_source_reset -> rst_controller_002:reset_in0

	altera_address_span_extender #(
		.DATA_WIDTH           (32),
		.BYTEENABLE_WIDTH     (4),
		.MASTER_ADDRESS_WIDTH (32),
		.SLAVE_ADDRESS_WIDTH  (16),
		.SLAVE_ADDRESS_SHIFT  (2),
		.BURSTCOUNT_WIDTH     (1),
		.CNTL_ADDRESS_WIDTH   (1),
		.SUB_WINDOW_COUNT     (1),
		.MASTER_ADDRESS_DEF   (64'b0000000000000000000000000000000000000000000000000000000000000000)
	) address_extender (
		.clk                  (clk_clk),                                                         //           clock.clk
		.reset                (rst_controller_reset_out_reset),                                  //           reset.reset
		.avs_s0_address       (mm_interconnect_0_address_extender_windowed_slave_address),       //  windowed_slave.address
		.avs_s0_read          (mm_interconnect_0_address_extender_windowed_slave_read),          //                .read
		.avs_s0_readdata      (mm_interconnect_0_address_extender_windowed_slave_readdata),      //                .readdata
		.avs_s0_write         (mm_interconnect_0_address_extender_windowed_slave_write),         //                .write
		.avs_s0_writedata     (mm_interconnect_0_address_extender_windowed_slave_writedata),     //                .writedata
		.avs_s0_readdatavalid (mm_interconnect_0_address_extender_windowed_slave_readdatavalid), //                .readdatavalid
		.avs_s0_waitrequest   (mm_interconnect_0_address_extender_windowed_slave_waitrequest),   //                .waitrequest
		.avs_s0_byteenable    (mm_interconnect_0_address_extender_windowed_slave_byteenable),    //                .byteenable
		.avs_s0_burstcount    (mm_interconnect_0_address_extender_windowed_slave_burstcount),    //                .burstcount
		.avm_m0_address       (address_extender_expanded_master_address),                        // expanded_master.address
		.avm_m0_read          (address_extender_expanded_master_read),                           //                .read
		.avm_m0_waitrequest   (address_extender_expanded_master_waitrequest),                    //                .waitrequest
		.avm_m0_readdata      (address_extender_expanded_master_readdata),                       //                .readdata
		.avm_m0_write         (address_extender_expanded_master_write),                          //                .write
		.avm_m0_writedata     (address_extender_expanded_master_writedata),                      //                .writedata
		.avm_m0_readdatavalid (address_extender_expanded_master_readdatavalid),                  //                .readdatavalid
		.avm_m0_byteenable    (address_extender_expanded_master_byteenable),                     //                .byteenable
		.avm_m0_burstcount    (address_extender_expanded_master_burstcount),                     //                .burstcount
		.avs_cntl_read        (mm_interconnect_0_address_extender_cntl_read),                    //            cntl.read
		.avs_cntl_readdata    (mm_interconnect_0_address_extender_cntl_readdata),                //                .readdata
		.avs_cntl_write       (mm_interconnect_0_address_extender_cntl_write),                   //                .write
		.avs_cntl_writedata   (mm_interconnect_0_address_extender_cntl_writedata),               //                .writedata
		.avs_cntl_byteenable  (mm_interconnect_0_address_extender_cntl_byteenable),              //                .byteenable
		.avs_cntl_address     (1'b0)                                                             //     (terminated)
	);

	soc_audio_AUDIO audio (
		.clk         (audio_clock_audio_clk_clk),                             //                clk.clk
		.reset       (rst_controller_001_reset_out_reset),                    //              reset.reset
		.address     (mm_interconnect_0_audio_avalon_audio_slave_address),    // avalon_audio_slave.address
		.chipselect  (mm_interconnect_0_audio_avalon_audio_slave_chipselect), //                   .chipselect
		.read        (mm_interconnect_0_audio_avalon_audio_slave_read),       //                   .read
		.write       (mm_interconnect_0_audio_avalon_audio_slave_write),      //                   .write
		.writedata   (mm_interconnect_0_audio_avalon_audio_slave_writedata),  //                   .writedata
		.readdata    (mm_interconnect_0_audio_avalon_audio_slave_readdata),   //                   .readdata
		.irq         (irq_synchronizer_receiver_irq),                         //          interrupt.irq
		.AUD_BCLK    (audio_BCLK),                                            // external_interface.export
		.AUD_DACDAT  (audio_DACDAT),                                          //                   .export
		.AUD_DACLRCK (audio_DACLRCK)                                          //                   .export
	);

	soc_audio_AUDIO_CLOCK audio_clock (
		.ref_clk_clk        (clk_clk),                        //      ref_clk.clk
		.ref_reset_reset    (~reset_reset_n),                 //    ref_reset.reset
		.audio_clk_clk      (audio_clock_audio_clk_clk),      //    audio_clk.clk
		.reset_source_reset (audio_clock_reset_source_reset)  // reset_source.reset
	);

	altera_axi_bridge #(
		.USE_PIPELINE          (1),
		.USE_M0_AWID           (1),
		.USE_M0_AWREGION       (1),
		.USE_M0_AWLEN          (1),
		.USE_M0_AWSIZE         (1),
		.USE_M0_AWBURST        (1),
		.USE_M0_AWLOCK         (1),
		.USE_M0_AWCACHE        (1),
		.USE_M0_AWQOS          (1),
		.USE_S0_AWREGION       (1),
		.USE_S0_AWLOCK         (1),
		.USE_S0_AWCACHE        (1),
		.USE_S0_AWQOS          (1),
		.USE_S0_AWPROT         (1),
		.USE_M0_WSTRB          (1),
		.USE_S0_WLAST          (1),
		.USE_M0_BID            (1),
		.USE_M0_BRESP          (1),
		.USE_S0_BRESP          (1),
		.USE_M0_ARID           (1),
		.USE_M0_ARREGION       (1),
		.USE_M0_ARLEN          (1),
		.USE_M0_ARSIZE         (1),
		.USE_M0_ARBURST        (1),
		.USE_M0_ARLOCK         (1),
		.USE_M0_ARCACHE        (1),
		.USE_M0_ARQOS          (1),
		.USE_S0_ARREGION       (1),
		.USE_S0_ARLOCK         (1),
		.USE_S0_ARCACHE        (1),
		.USE_S0_ARQOS          (1),
		.USE_S0_ARPROT         (1),
		.USE_M0_RID            (1),
		.USE_M0_RRESP          (1),
		.USE_M0_RLAST          (1),
		.USE_S0_RRESP          (1),
		.M0_ID_WIDTH           (8),
		.S0_ID_WIDTH           (8),
		.DATA_WIDTH            (64),
		.WRITE_ADDR_USER_WIDTH (64),
		.READ_ADDR_USER_WIDTH  (64),
		.WRITE_DATA_USER_WIDTH (64),
		.WRITE_RESP_USER_WIDTH (64),
		.READ_DATA_USER_WIDTH  (64),
		.ADDR_WIDTH            (32),
		.USE_S0_AWUSER         (0),
		.USE_S0_ARUSER         (0),
		.USE_S0_WUSER          (0),
		.USE_S0_RUSER          (0),
		.USE_S0_BUSER          (0),
		.USE_M0_AWUSER         (0),
		.USE_M0_ARUSER         (0),
		.USE_M0_WUSER          (0),
		.USE_M0_RUSER          (0),
		.USE_M0_BUSER          (0),
		.AXI_VERSION           ("AXI3"),
		.BURST_LENGTH_WIDTH    (4),
		.LOCK_WIDTH            (2)
	) axi_bridge (
		.aclk        (pll_sdram_clk_clk),                                                    //       clk.clk
		.aresetn     (~rst_controller_002_reset_out_reset),                                  // clk_reset.reset_n
		.s0_awid     (mm_interconnect_1_axi_bridge_s0_awid),                                 //        s0.awid
		.s0_awaddr   (mm_interconnect_1_axi_bridge_s0_awaddr),                               //          .awaddr
		.s0_awlen    (mm_interconnect_1_axi_bridge_s0_awlen),                                //          .awlen
		.s0_awsize   (mm_interconnect_1_axi_bridge_s0_awsize),                               //          .awsize
		.s0_awburst  (mm_interconnect_1_axi_bridge_s0_awburst),                              //          .awburst
		.s0_awlock   (mm_interconnect_1_axi_bridge_s0_awlock),                               //          .awlock
		.s0_awcache  (mm_interconnect_1_axi_bridge_s0_awcache),                              //          .awcache
		.s0_awprot   (mm_interconnect_1_axi_bridge_s0_awprot),                               //          .awprot
		.s0_awvalid  (mm_interconnect_1_axi_bridge_s0_awvalid),                              //          .awvalid
		.s0_awready  (mm_interconnect_1_axi_bridge_s0_awready),                              //          .awready
		.s0_wid      (mm_interconnect_1_axi_bridge_s0_wid),                                  //          .wid
		.s0_wdata    (mm_interconnect_1_axi_bridge_s0_wdata),                                //          .wdata
		.s0_wstrb    (mm_interconnect_1_axi_bridge_s0_wstrb),                                //          .wstrb
		.s0_wlast    (mm_interconnect_1_axi_bridge_s0_wlast),                                //          .wlast
		.s0_wvalid   (mm_interconnect_1_axi_bridge_s0_wvalid),                               //          .wvalid
		.s0_wready   (mm_interconnect_1_axi_bridge_s0_wready),                               //          .wready
		.s0_bid      (mm_interconnect_1_axi_bridge_s0_bid),                                  //          .bid
		.s0_bresp    (mm_interconnect_1_axi_bridge_s0_bresp),                                //          .bresp
		.s0_bvalid   (mm_interconnect_1_axi_bridge_s0_bvalid),                               //          .bvalid
		.s0_bready   (mm_interconnect_1_axi_bridge_s0_bready),                               //          .bready
		.s0_arid     (mm_interconnect_1_axi_bridge_s0_arid),                                 //          .arid
		.s0_araddr   (mm_interconnect_1_axi_bridge_s0_araddr),                               //          .araddr
		.s0_arlen    (mm_interconnect_1_axi_bridge_s0_arlen),                                //          .arlen
		.s0_arsize   (mm_interconnect_1_axi_bridge_s0_arsize),                               //          .arsize
		.s0_arburst  (mm_interconnect_1_axi_bridge_s0_arburst),                              //          .arburst
		.s0_arlock   (mm_interconnect_1_axi_bridge_s0_arlock),                               //          .arlock
		.s0_arcache  (mm_interconnect_1_axi_bridge_s0_arcache),                              //          .arcache
		.s0_arprot   (mm_interconnect_1_axi_bridge_s0_arprot),                               //          .arprot
		.s0_arvalid  (mm_interconnect_1_axi_bridge_s0_arvalid),                              //          .arvalid
		.s0_arready  (mm_interconnect_1_axi_bridge_s0_arready),                              //          .arready
		.s0_rid      (mm_interconnect_1_axi_bridge_s0_rid),                                  //          .rid
		.s0_rdata    (mm_interconnect_1_axi_bridge_s0_rdata),                                //          .rdata
		.s0_rresp    (mm_interconnect_1_axi_bridge_s0_rresp),                                //          .rresp
		.s0_rlast    (mm_interconnect_1_axi_bridge_s0_rlast),                                //          .rlast
		.s0_rvalid   (mm_interconnect_1_axi_bridge_s0_rvalid),                               //          .rvalid
		.s0_rready   (mm_interconnect_1_axi_bridge_s0_rready),                               //          .rready
		.m0_awid     (axi_bridge_m0_awid),                                                   //        m0.awid
		.m0_awaddr   (axi_bridge_m0_awaddr),                                                 //          .awaddr
		.m0_awlen    (axi_bridge_m0_awlen),                                                  //          .awlen
		.m0_awsize   (axi_bridge_m0_awsize),                                                 //          .awsize
		.m0_awburst  (axi_bridge_m0_awburst),                                                //          .awburst
		.m0_awlock   (axi_bridge_m0_awlock),                                                 //          .awlock
		.m0_awcache  (axi_bridge_m0_awcache),                                                //          .awcache
		.m0_awprot   (axi_bridge_m0_awprot),                                                 //          .awprot
		.m0_awvalid  (axi_bridge_m0_awvalid),                                                //          .awvalid
		.m0_awready  (axi_bridge_m0_awready),                                                //          .awready
		.m0_wid      (axi_bridge_m0_wid),                                                    //          .wid
		.m0_wdata    (axi_bridge_m0_wdata),                                                  //          .wdata
		.m0_wstrb    (axi_bridge_m0_wstrb),                                                  //          .wstrb
		.m0_wlast    (axi_bridge_m0_wlast),                                                  //          .wlast
		.m0_wvalid   (axi_bridge_m0_wvalid),                                                 //          .wvalid
		.m0_wready   (axi_bridge_m0_wready),                                                 //          .wready
		.m0_bid      (axi_bridge_m0_bid),                                                    //          .bid
		.m0_bresp    (axi_bridge_m0_bresp),                                                  //          .bresp
		.m0_bvalid   (axi_bridge_m0_bvalid),                                                 //          .bvalid
		.m0_bready   (axi_bridge_m0_bready),                                                 //          .bready
		.m0_arid     (axi_bridge_m0_arid),                                                   //          .arid
		.m0_araddr   (axi_bridge_m0_araddr),                                                 //          .araddr
		.m0_arlen    (axi_bridge_m0_arlen),                                                  //          .arlen
		.m0_arsize   (axi_bridge_m0_arsize),                                                 //          .arsize
		.m0_arburst  (axi_bridge_m0_arburst),                                                //          .arburst
		.m0_arlock   (axi_bridge_m0_arlock),                                                 //          .arlock
		.m0_arcache  (axi_bridge_m0_arcache),                                                //          .arcache
		.m0_arprot   (axi_bridge_m0_arprot),                                                 //          .arprot
		.m0_arvalid  (axi_bridge_m0_arvalid),                                                //          .arvalid
		.m0_arready  (axi_bridge_m0_arready),                                                //          .arready
		.m0_rid      (axi_bridge_m0_rid),                                                    //          .rid
		.m0_rdata    (axi_bridge_m0_rdata),                                                  //          .rdata
		.m0_rresp    (axi_bridge_m0_rresp),                                                  //          .rresp
		.m0_rlast    (axi_bridge_m0_rlast),                                                  //          .rlast
		.m0_rvalid   (axi_bridge_m0_rvalid),                                                 //          .rvalid
		.m0_rready   (axi_bridge_m0_rready),                                                 //          .rready
		.s0_awuser   (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.s0_aruser   (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.m0_awuser   (),                                                                     // (terminated)
		.m0_aruser   (),                                                                     // (terminated)
		.s0_awqos    (4'b0000),                                                              // (terminated)
		.s0_arqos    (4'b0000),                                                              // (terminated)
		.s0_awregion (4'b0000),                                                              // (terminated)
		.s0_arregion (4'b0000),                                                              // (terminated)
		.s0_wuser    (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.s0_ruser    (),                                                                     // (terminated)
		.s0_buser    (),                                                                     // (terminated)
		.m0_awqos    (),                                                                     // (terminated)
		.m0_arqos    (),                                                                     // (terminated)
		.m0_awregion (),                                                                     // (terminated)
		.m0_arregion (),                                                                     // (terminated)
		.m0_wuser    (),                                                                     // (terminated)
		.m0_ruser    (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.m0_buser    (64'b0000000000000000000000000000000000000000000000000000000000000000)  // (terminated)
	);

	soc_audio_BUTTONS buttons (
		.clk      (clk_clk),                               //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),       //               reset.reset_n
		.address  (mm_interconnect_0_buttons_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_buttons_s1_readdata), //                    .readdata
		.in_port  (buttons_export)                         // external_connection.export
	);

	soc_audio_HPS #(
		.F2S_Width (0),
		.S2F_Width (0)
	) hps (
		.mem_a                 (memory_mem_a),                 //            memory.mem_a
		.mem_ba                (memory_mem_ba),                //                  .mem_ba
		.mem_ck                (memory_mem_ck),                //                  .mem_ck
		.mem_ck_n              (memory_mem_ck_n),              //                  .mem_ck_n
		.mem_cke               (memory_mem_cke),               //                  .mem_cke
		.mem_cs_n              (memory_mem_cs_n),              //                  .mem_cs_n
		.mem_ras_n             (memory_mem_ras_n),             //                  .mem_ras_n
		.mem_cas_n             (memory_mem_cas_n),             //                  .mem_cas_n
		.mem_we_n              (memory_mem_we_n),              //                  .mem_we_n
		.mem_reset_n           (memory_mem_reset_n),           //                  .mem_reset_n
		.mem_dq                (memory_mem_dq),                //                  .mem_dq
		.mem_dqs               (memory_mem_dqs),               //                  .mem_dqs
		.mem_dqs_n             (memory_mem_dqs_n),             //                  .mem_dqs_n
		.mem_odt               (memory_mem_odt),               //                  .mem_odt
		.mem_dm                (memory_mem_dm),                //                  .mem_dm
		.oct_rzqin             (memory_oct_rzqin),             //                  .oct_rzqin
		.hps_io_sdio_inst_CMD  (hps_io_hps_io_sdio_inst_CMD),  //            hps_io.hps_io_sdio_inst_CMD
		.hps_io_sdio_inst_D0   (hps_io_hps_io_sdio_inst_D0),   //                  .hps_io_sdio_inst_D0
		.hps_io_sdio_inst_D1   (hps_io_hps_io_sdio_inst_D1),   //                  .hps_io_sdio_inst_D1
		.hps_io_sdio_inst_CLK  (hps_io_hps_io_sdio_inst_CLK),  //                  .hps_io_sdio_inst_CLK
		.hps_io_sdio_inst_D2   (hps_io_hps_io_sdio_inst_D2),   //                  .hps_io_sdio_inst_D2
		.hps_io_sdio_inst_D3   (hps_io_hps_io_sdio_inst_D3),   //                  .hps_io_sdio_inst_D3
		.hps_io_uart0_inst_RX  (hps_io_hps_io_uart0_inst_RX),  //                  .hps_io_uart0_inst_RX
		.hps_io_uart0_inst_TX  (hps_io_hps_io_uart0_inst_TX),  //                  .hps_io_uart0_inst_TX
		.hps_io_uart0_inst_CTS (hps_io_hps_io_uart0_inst_CTS), //                  .hps_io_uart0_inst_CTS
		.hps_io_uart0_inst_RTS (hps_io_hps_io_uart0_inst_RTS), //                  .hps_io_uart0_inst_RTS
		.h2f_rst_n             (),                             //         h2f_reset.reset_n
		.f2h_sdram0_clk        (pll_sdram_clk_clk),            //  f2h_sdram0_clock.clk
		.f2h_sdram0_ARADDR     (axi_bridge_m0_araddr),         //   f2h_sdram0_data.araddr
		.f2h_sdram0_ARLEN      (axi_bridge_m0_arlen),          //                  .arlen
		.f2h_sdram0_ARID       (axi_bridge_m0_arid),           //                  .arid
		.f2h_sdram0_ARSIZE     (axi_bridge_m0_arsize),         //                  .arsize
		.f2h_sdram0_ARBURST    (axi_bridge_m0_arburst),        //                  .arburst
		.f2h_sdram0_ARLOCK     (axi_bridge_m0_arlock),         //                  .arlock
		.f2h_sdram0_ARPROT     (axi_bridge_m0_arprot),         //                  .arprot
		.f2h_sdram0_ARVALID    (axi_bridge_m0_arvalid),        //                  .arvalid
		.f2h_sdram0_ARCACHE    (axi_bridge_m0_arcache),        //                  .arcache
		.f2h_sdram0_AWADDR     (axi_bridge_m0_awaddr),         //                  .awaddr
		.f2h_sdram0_AWLEN      (axi_bridge_m0_awlen),          //                  .awlen
		.f2h_sdram0_AWID       (axi_bridge_m0_awid),           //                  .awid
		.f2h_sdram0_AWSIZE     (axi_bridge_m0_awsize),         //                  .awsize
		.f2h_sdram0_AWBURST    (axi_bridge_m0_awburst),        //                  .awburst
		.f2h_sdram0_AWLOCK     (axi_bridge_m0_awlock),         //                  .awlock
		.f2h_sdram0_AWPROT     (axi_bridge_m0_awprot),         //                  .awprot
		.f2h_sdram0_AWVALID    (axi_bridge_m0_awvalid),        //                  .awvalid
		.f2h_sdram0_AWCACHE    (axi_bridge_m0_awcache),        //                  .awcache
		.f2h_sdram0_BRESP      (axi_bridge_m0_bresp),          //                  .bresp
		.f2h_sdram0_BID        (axi_bridge_m0_bid),            //                  .bid
		.f2h_sdram0_BVALID     (axi_bridge_m0_bvalid),         //                  .bvalid
		.f2h_sdram0_BREADY     (axi_bridge_m0_bready),         //                  .bready
		.f2h_sdram0_ARREADY    (axi_bridge_m0_arready),        //                  .arready
		.f2h_sdram0_AWREADY    (axi_bridge_m0_awready),        //                  .awready
		.f2h_sdram0_RREADY     (axi_bridge_m0_rready),         //                  .rready
		.f2h_sdram0_RDATA      (axi_bridge_m0_rdata),          //                  .rdata
		.f2h_sdram0_RRESP      (axi_bridge_m0_rresp),          //                  .rresp
		.f2h_sdram0_RLAST      (axi_bridge_m0_rlast),          //                  .rlast
		.f2h_sdram0_RID        (axi_bridge_m0_rid),            //                  .rid
		.f2h_sdram0_RVALID     (axi_bridge_m0_rvalid),         //                  .rvalid
		.f2h_sdram0_WLAST      (axi_bridge_m0_wlast),          //                  .wlast
		.f2h_sdram0_WVALID     (axi_bridge_m0_wvalid),         //                  .wvalid
		.f2h_sdram0_WDATA      (axi_bridge_m0_wdata),          //                  .wdata
		.f2h_sdram0_WSTRB      (axi_bridge_m0_wstrb),          //                  .wstrb
		.f2h_sdram0_WREADY     (axi_bridge_m0_wready),         //                  .wready
		.f2h_sdram0_WID        (axi_bridge_m0_wid),            //                  .wid
		.h2f_lw_axi_clk        (pll_sys_clk_clk),              //  h2f_lw_axi_clock.clk
		.h2f_lw_AWID           (),                             // h2f_lw_axi_master.awid
		.h2f_lw_AWADDR         (),                             //                  .awaddr
		.h2f_lw_AWLEN          (),                             //                  .awlen
		.h2f_lw_AWSIZE         (),                             //                  .awsize
		.h2f_lw_AWBURST        (),                             //                  .awburst
		.h2f_lw_AWLOCK         (),                             //                  .awlock
		.h2f_lw_AWCACHE        (),                             //                  .awcache
		.h2f_lw_AWPROT         (),                             //                  .awprot
		.h2f_lw_AWVALID        (),                             //                  .awvalid
		.h2f_lw_AWREADY        (),                             //                  .awready
		.h2f_lw_WID            (),                             //                  .wid
		.h2f_lw_WDATA          (),                             //                  .wdata
		.h2f_lw_WSTRB          (),                             //                  .wstrb
		.h2f_lw_WLAST          (),                             //                  .wlast
		.h2f_lw_WVALID         (),                             //                  .wvalid
		.h2f_lw_WREADY         (),                             //                  .wready
		.h2f_lw_BID            (),                             //                  .bid
		.h2f_lw_BRESP          (),                             //                  .bresp
		.h2f_lw_BVALID         (),                             //                  .bvalid
		.h2f_lw_BREADY         (),                             //                  .bready
		.h2f_lw_ARID           (),                             //                  .arid
		.h2f_lw_ARADDR         (),                             //                  .araddr
		.h2f_lw_ARLEN          (),                             //                  .arlen
		.h2f_lw_ARSIZE         (),                             //                  .arsize
		.h2f_lw_ARBURST        (),                             //                  .arburst
		.h2f_lw_ARLOCK         (),                             //                  .arlock
		.h2f_lw_ARCACHE        (),                             //                  .arcache
		.h2f_lw_ARPROT         (),                             //                  .arprot
		.h2f_lw_ARVALID        (),                             //                  .arvalid
		.h2f_lw_ARREADY        (),                             //                  .arready
		.h2f_lw_RID            (),                             //                  .rid
		.h2f_lw_RDATA          (),                             //                  .rdata
		.h2f_lw_RRESP          (),                             //                  .rresp
		.h2f_lw_RLAST          (),                             //                  .rlast
		.h2f_lw_RVALID         (),                             //                  .rvalid
		.h2f_lw_RREADY         ()                              //                  .rready
	);

	soc_audio_JTAG_UART jtag_uart (
		.clk            (clk_clk),                                                   //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                           //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver2_irq)                                   //               irq.irq
	);

	soc_audio_NIOS nios (
		.clk                                 (clk_clk),                                            //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                    //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                 //                          .reset_req
		.d_address                           (nios_data_master_address),                           //               data_master.address
		.d_byteenable                        (nios_data_master_byteenable),                        //                          .byteenable
		.d_read                              (nios_data_master_read),                              //                          .read
		.d_readdata                          (nios_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (nios_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (nios_data_master_write),                             //                          .write
		.d_writedata                         (nios_data_master_writedata),                         //                          .writedata
		.debug_mem_slave_debugaccess_to_roms (nios_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (nios_instruction_master_address),                    //        instruction_master.address
		.i_read                              (nios_instruction_master_read),                       //                          .read
		.i_readdata                          (nios_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (nios_instruction_master_waitrequest),                //                          .waitrequest
		.irq                                 (nios_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (),                                                   //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_nios_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_nios_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_nios_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_nios_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_nios_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_nios_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_nios_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_nios_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                    // custom_instruction_master.readra
	);

	soc_audio_PLL pll (
		.ref_clk_clk        (clk_clk),                //      ref_clk.clk
		.ref_reset_reset    (~reset_reset_n),         //    ref_reset.reset
		.sys_clk_clk        (pll_sys_clk_clk),        //      sys_clk.clk
		.sdram_clk_clk      (pll_sdram_clk_clk),      //    sdram_clk.clk
		.reset_source_reset (pll_reset_source_reset)  // reset_source.reset
	);

	soc_audio_RAM ram (
		.clk        (clk_clk),                             //   clk1.clk
		.address    (mm_interconnect_0_ram_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_ram_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_ram_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_ram_s1_write),      //       .write
		.readdata   (mm_interconnect_0_ram_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_ram_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_ram_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),      // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),  //       .reset_req
		.freeze     (1'b0)                                 // (terminated)
	);

	soc_audio_SEVEN_SEGMENTS seven_segments (
		.clk        (clk_clk),                                        //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                //               reset.reset_n
		.address    (mm_interconnect_0_seven_segments_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seven_segments_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seven_segments_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seven_segments_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seven_segments_s1_readdata),   //                    .readdata
		.out_port   (seven_segments_export)                           // external_connection.export
	);

	soc_audio_TIMER timer (
		.clk        (clk_clk),                               //   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       // reset.reset_n
		.address    (mm_interconnect_0_timer_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver1_irq)               //   irq.irq
	);

	soc_audio_mm_interconnect_0 mm_interconnect_0 (
		.AUDIO_CLOCK_audio_clk_clk                     (audio_clock_audio_clk_clk),                                       //             AUDIO_CLOCK_audio_clk.clk
		.CLK_clk_clk                                   (clk_clk),                                                         //                           CLK_clk.clk
		.AUDIO_reset_reset_bridge_in_reset_reset       (rst_controller_001_reset_out_reset),                              // AUDIO_reset_reset_bridge_in_reset.reset
		.NIOS_reset_reset_bridge_in_reset_reset        (rst_controller_reset_out_reset),                                  //  NIOS_reset_reset_bridge_in_reset.reset
		.NIOS_data_master_address                      (nios_data_master_address),                                        //                  NIOS_data_master.address
		.NIOS_data_master_waitrequest                  (nios_data_master_waitrequest),                                    //                                  .waitrequest
		.NIOS_data_master_byteenable                   (nios_data_master_byteenable),                                     //                                  .byteenable
		.NIOS_data_master_read                         (nios_data_master_read),                                           //                                  .read
		.NIOS_data_master_readdata                     (nios_data_master_readdata),                                       //                                  .readdata
		.NIOS_data_master_write                        (nios_data_master_write),                                          //                                  .write
		.NIOS_data_master_writedata                    (nios_data_master_writedata),                                      //                                  .writedata
		.NIOS_data_master_debugaccess                  (nios_data_master_debugaccess),                                    //                                  .debugaccess
		.NIOS_instruction_master_address               (nios_instruction_master_address),                                 //           NIOS_instruction_master.address
		.NIOS_instruction_master_waitrequest           (nios_instruction_master_waitrequest),                             //                                  .waitrequest
		.NIOS_instruction_master_read                  (nios_instruction_master_read),                                    //                                  .read
		.NIOS_instruction_master_readdata              (nios_instruction_master_readdata),                                //                                  .readdata
		.ADDRESS_EXTENDER_cntl_write                   (mm_interconnect_0_address_extender_cntl_write),                   //             ADDRESS_EXTENDER_cntl.write
		.ADDRESS_EXTENDER_cntl_read                    (mm_interconnect_0_address_extender_cntl_read),                    //                                  .read
		.ADDRESS_EXTENDER_cntl_readdata                (mm_interconnect_0_address_extender_cntl_readdata),                //                                  .readdata
		.ADDRESS_EXTENDER_cntl_writedata               (mm_interconnect_0_address_extender_cntl_writedata),               //                                  .writedata
		.ADDRESS_EXTENDER_cntl_byteenable              (mm_interconnect_0_address_extender_cntl_byteenable),              //                                  .byteenable
		.ADDRESS_EXTENDER_windowed_slave_address       (mm_interconnect_0_address_extender_windowed_slave_address),       //   ADDRESS_EXTENDER_windowed_slave.address
		.ADDRESS_EXTENDER_windowed_slave_write         (mm_interconnect_0_address_extender_windowed_slave_write),         //                                  .write
		.ADDRESS_EXTENDER_windowed_slave_read          (mm_interconnect_0_address_extender_windowed_slave_read),          //                                  .read
		.ADDRESS_EXTENDER_windowed_slave_readdata      (mm_interconnect_0_address_extender_windowed_slave_readdata),      //                                  .readdata
		.ADDRESS_EXTENDER_windowed_slave_writedata     (mm_interconnect_0_address_extender_windowed_slave_writedata),     //                                  .writedata
		.ADDRESS_EXTENDER_windowed_slave_burstcount    (mm_interconnect_0_address_extender_windowed_slave_burstcount),    //                                  .burstcount
		.ADDRESS_EXTENDER_windowed_slave_byteenable    (mm_interconnect_0_address_extender_windowed_slave_byteenable),    //                                  .byteenable
		.ADDRESS_EXTENDER_windowed_slave_readdatavalid (mm_interconnect_0_address_extender_windowed_slave_readdatavalid), //                                  .readdatavalid
		.ADDRESS_EXTENDER_windowed_slave_waitrequest   (mm_interconnect_0_address_extender_windowed_slave_waitrequest),   //                                  .waitrequest
		.AUDIO_avalon_audio_slave_address              (mm_interconnect_0_audio_avalon_audio_slave_address),              //          AUDIO_avalon_audio_slave.address
		.AUDIO_avalon_audio_slave_write                (mm_interconnect_0_audio_avalon_audio_slave_write),                //                                  .write
		.AUDIO_avalon_audio_slave_read                 (mm_interconnect_0_audio_avalon_audio_slave_read),                 //                                  .read
		.AUDIO_avalon_audio_slave_readdata             (mm_interconnect_0_audio_avalon_audio_slave_readdata),             //                                  .readdata
		.AUDIO_avalon_audio_slave_writedata            (mm_interconnect_0_audio_avalon_audio_slave_writedata),            //                                  .writedata
		.AUDIO_avalon_audio_slave_chipselect           (mm_interconnect_0_audio_avalon_audio_slave_chipselect),           //                                  .chipselect
		.BUTTONS_s1_address                            (mm_interconnect_0_buttons_s1_address),                            //                        BUTTONS_s1.address
		.BUTTONS_s1_readdata                           (mm_interconnect_0_buttons_s1_readdata),                           //                                  .readdata
		.JTAG_UART_avalon_jtag_slave_address           (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),           //       JTAG_UART_avalon_jtag_slave.address
		.JTAG_UART_avalon_jtag_slave_write             (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),             //                                  .write
		.JTAG_UART_avalon_jtag_slave_read              (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),              //                                  .read
		.JTAG_UART_avalon_jtag_slave_readdata          (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),          //                                  .readdata
		.JTAG_UART_avalon_jtag_slave_writedata         (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),         //                                  .writedata
		.JTAG_UART_avalon_jtag_slave_waitrequest       (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest),       //                                  .waitrequest
		.JTAG_UART_avalon_jtag_slave_chipselect        (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),        //                                  .chipselect
		.NIOS_debug_mem_slave_address                  (mm_interconnect_0_nios_debug_mem_slave_address),                  //              NIOS_debug_mem_slave.address
		.NIOS_debug_mem_slave_write                    (mm_interconnect_0_nios_debug_mem_slave_write),                    //                                  .write
		.NIOS_debug_mem_slave_read                     (mm_interconnect_0_nios_debug_mem_slave_read),                     //                                  .read
		.NIOS_debug_mem_slave_readdata                 (mm_interconnect_0_nios_debug_mem_slave_readdata),                 //                                  .readdata
		.NIOS_debug_mem_slave_writedata                (mm_interconnect_0_nios_debug_mem_slave_writedata),                //                                  .writedata
		.NIOS_debug_mem_slave_byteenable               (mm_interconnect_0_nios_debug_mem_slave_byteenable),               //                                  .byteenable
		.NIOS_debug_mem_slave_waitrequest              (mm_interconnect_0_nios_debug_mem_slave_waitrequest),              //                                  .waitrequest
		.NIOS_debug_mem_slave_debugaccess              (mm_interconnect_0_nios_debug_mem_slave_debugaccess),              //                                  .debugaccess
		.RAM_s1_address                                (mm_interconnect_0_ram_s1_address),                                //                            RAM_s1.address
		.RAM_s1_write                                  (mm_interconnect_0_ram_s1_write),                                  //                                  .write
		.RAM_s1_readdata                               (mm_interconnect_0_ram_s1_readdata),                               //                                  .readdata
		.RAM_s1_writedata                              (mm_interconnect_0_ram_s1_writedata),                              //                                  .writedata
		.RAM_s1_byteenable                             (mm_interconnect_0_ram_s1_byteenable),                             //                                  .byteenable
		.RAM_s1_chipselect                             (mm_interconnect_0_ram_s1_chipselect),                             //                                  .chipselect
		.RAM_s1_clken                                  (mm_interconnect_0_ram_s1_clken),                                  //                                  .clken
		.SEVEN_SEGMENTS_s1_address                     (mm_interconnect_0_seven_segments_s1_address),                     //                 SEVEN_SEGMENTS_s1.address
		.SEVEN_SEGMENTS_s1_write                       (mm_interconnect_0_seven_segments_s1_write),                       //                                  .write
		.SEVEN_SEGMENTS_s1_readdata                    (mm_interconnect_0_seven_segments_s1_readdata),                    //                                  .readdata
		.SEVEN_SEGMENTS_s1_writedata                   (mm_interconnect_0_seven_segments_s1_writedata),                   //                                  .writedata
		.SEVEN_SEGMENTS_s1_chipselect                  (mm_interconnect_0_seven_segments_s1_chipselect),                  //                                  .chipselect
		.TIMER_s1_address                              (mm_interconnect_0_timer_s1_address),                              //                          TIMER_s1.address
		.TIMER_s1_write                                (mm_interconnect_0_timer_s1_write),                                //                                  .write
		.TIMER_s1_readdata                             (mm_interconnect_0_timer_s1_readdata),                             //                                  .readdata
		.TIMER_s1_writedata                            (mm_interconnect_0_timer_s1_writedata),                            //                                  .writedata
		.TIMER_s1_chipselect                           (mm_interconnect_0_timer_s1_chipselect)                            //                                  .chipselect
	);

	soc_audio_mm_interconnect_1 mm_interconnect_1 (
		.AXI_BRIDGE_s0_awid                                 (mm_interconnect_1_axi_bridge_s0_awid),           //                                AXI_BRIDGE_s0.awid
		.AXI_BRIDGE_s0_awaddr                               (mm_interconnect_1_axi_bridge_s0_awaddr),         //                                             .awaddr
		.AXI_BRIDGE_s0_awlen                                (mm_interconnect_1_axi_bridge_s0_awlen),          //                                             .awlen
		.AXI_BRIDGE_s0_awsize                               (mm_interconnect_1_axi_bridge_s0_awsize),         //                                             .awsize
		.AXI_BRIDGE_s0_awburst                              (mm_interconnect_1_axi_bridge_s0_awburst),        //                                             .awburst
		.AXI_BRIDGE_s0_awlock                               (mm_interconnect_1_axi_bridge_s0_awlock),         //                                             .awlock
		.AXI_BRIDGE_s0_awcache                              (mm_interconnect_1_axi_bridge_s0_awcache),        //                                             .awcache
		.AXI_BRIDGE_s0_awprot                               (mm_interconnect_1_axi_bridge_s0_awprot),         //                                             .awprot
		.AXI_BRIDGE_s0_awvalid                              (mm_interconnect_1_axi_bridge_s0_awvalid),        //                                             .awvalid
		.AXI_BRIDGE_s0_awready                              (mm_interconnect_1_axi_bridge_s0_awready),        //                                             .awready
		.AXI_BRIDGE_s0_wid                                  (mm_interconnect_1_axi_bridge_s0_wid),            //                                             .wid
		.AXI_BRIDGE_s0_wdata                                (mm_interconnect_1_axi_bridge_s0_wdata),          //                                             .wdata
		.AXI_BRIDGE_s0_wstrb                                (mm_interconnect_1_axi_bridge_s0_wstrb),          //                                             .wstrb
		.AXI_BRIDGE_s0_wlast                                (mm_interconnect_1_axi_bridge_s0_wlast),          //                                             .wlast
		.AXI_BRIDGE_s0_wvalid                               (mm_interconnect_1_axi_bridge_s0_wvalid),         //                                             .wvalid
		.AXI_BRIDGE_s0_wready                               (mm_interconnect_1_axi_bridge_s0_wready),         //                                             .wready
		.AXI_BRIDGE_s0_bid                                  (mm_interconnect_1_axi_bridge_s0_bid),            //                                             .bid
		.AXI_BRIDGE_s0_bresp                                (mm_interconnect_1_axi_bridge_s0_bresp),          //                                             .bresp
		.AXI_BRIDGE_s0_bvalid                               (mm_interconnect_1_axi_bridge_s0_bvalid),         //                                             .bvalid
		.AXI_BRIDGE_s0_bready                               (mm_interconnect_1_axi_bridge_s0_bready),         //                                             .bready
		.AXI_BRIDGE_s0_arid                                 (mm_interconnect_1_axi_bridge_s0_arid),           //                                             .arid
		.AXI_BRIDGE_s0_araddr                               (mm_interconnect_1_axi_bridge_s0_araddr),         //                                             .araddr
		.AXI_BRIDGE_s0_arlen                                (mm_interconnect_1_axi_bridge_s0_arlen),          //                                             .arlen
		.AXI_BRIDGE_s0_arsize                               (mm_interconnect_1_axi_bridge_s0_arsize),         //                                             .arsize
		.AXI_BRIDGE_s0_arburst                              (mm_interconnect_1_axi_bridge_s0_arburst),        //                                             .arburst
		.AXI_BRIDGE_s0_arlock                               (mm_interconnect_1_axi_bridge_s0_arlock),         //                                             .arlock
		.AXI_BRIDGE_s0_arcache                              (mm_interconnect_1_axi_bridge_s0_arcache),        //                                             .arcache
		.AXI_BRIDGE_s0_arprot                               (mm_interconnect_1_axi_bridge_s0_arprot),         //                                             .arprot
		.AXI_BRIDGE_s0_arvalid                              (mm_interconnect_1_axi_bridge_s0_arvalid),        //                                             .arvalid
		.AXI_BRIDGE_s0_arready                              (mm_interconnect_1_axi_bridge_s0_arready),        //                                             .arready
		.AXI_BRIDGE_s0_rid                                  (mm_interconnect_1_axi_bridge_s0_rid),            //                                             .rid
		.AXI_BRIDGE_s0_rdata                                (mm_interconnect_1_axi_bridge_s0_rdata),          //                                             .rdata
		.AXI_BRIDGE_s0_rresp                                (mm_interconnect_1_axi_bridge_s0_rresp),          //                                             .rresp
		.AXI_BRIDGE_s0_rlast                                (mm_interconnect_1_axi_bridge_s0_rlast),          //                                             .rlast
		.AXI_BRIDGE_s0_rvalid                               (mm_interconnect_1_axi_bridge_s0_rvalid),         //                                             .rvalid
		.AXI_BRIDGE_s0_rready                               (mm_interconnect_1_axi_bridge_s0_rready),         //                                             .rready
		.CLK_clk_clk                                        (clk_clk),                                        //                                      CLK_clk.clk
		.PLL_sdram_clk_clk                                  (pll_sdram_clk_clk),                              //                                PLL_sdram_clk.clk
		.ADDRESS_EXTENDER_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                 // ADDRESS_EXTENDER_reset_reset_bridge_in_reset.reset
		.AXI_BRIDGE_clk_reset_reset_bridge_in_reset_reset   (rst_controller_002_reset_out_reset),             //   AXI_BRIDGE_clk_reset_reset_bridge_in_reset.reset
		.ADDRESS_EXTENDER_expanded_master_address           (address_extender_expanded_master_address),       //             ADDRESS_EXTENDER_expanded_master.address
		.ADDRESS_EXTENDER_expanded_master_waitrequest       (address_extender_expanded_master_waitrequest),   //                                             .waitrequest
		.ADDRESS_EXTENDER_expanded_master_burstcount        (address_extender_expanded_master_burstcount),    //                                             .burstcount
		.ADDRESS_EXTENDER_expanded_master_byteenable        (address_extender_expanded_master_byteenable),    //                                             .byteenable
		.ADDRESS_EXTENDER_expanded_master_read              (address_extender_expanded_master_read),          //                                             .read
		.ADDRESS_EXTENDER_expanded_master_readdata          (address_extender_expanded_master_readdata),      //                                             .readdata
		.ADDRESS_EXTENDER_expanded_master_readdatavalid     (address_extender_expanded_master_readdatavalid), //                                             .readdatavalid
		.ADDRESS_EXTENDER_expanded_master_write             (address_extender_expanded_master_write),         //                                             .write
		.ADDRESS_EXTENDER_expanded_master_writedata         (address_extender_expanded_master_writedata)      //                                             .writedata
	);

	soc_audio_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.sender_irq    (nios_irq_irq)                    //    sender.irq
	);

	altera_irq_clock_crosser #(
		.IRQ_WIDTH (1)
	) irq_synchronizer (
		.receiver_clk   (audio_clock_audio_clk_clk),          //       receiver_clk.clk
		.sender_clk     (clk_clk),                            //         sender_clk.clk
		.receiver_reset (rst_controller_001_reset_out_reset), // receiver_clk_reset.reset
		.sender_reset   (rst_controller_reset_out_reset),     //   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_receiver_irq),      //           receiver.irq
		.sender_irq     (irq_mapper_receiver0_irq)            //             sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (audio_clock_reset_source_reset),     // reset_in0.reset
		.clk            (audio_clock_audio_clk_clk),          //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (pll_reset_source_reset),             // reset_in0.reset
		.clk            (pll_sdram_clk_clk),                  //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
