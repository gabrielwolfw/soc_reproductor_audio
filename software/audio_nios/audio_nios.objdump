
audio_nios.elf:     file format elf32-littlenios2
audio_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000330 memsz 0x00000330 flags r-x
    LOAD off    0x00001350 vaddr 0x00004350 paddr 0x000043f4 align 2**12
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
    LOAD off    0x00001498 vaddr 0x00004498 paddr 0x00004498 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000013f4  2**0
                  CONTENTS
  2 .text         00000300  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  00004320  00004320  00001320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000a4  00004350  000043f4  00001350  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00004498  00004498  00001498  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000044a8  000044a8  000013f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001f8  00000000  00000000  00001418  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000016c6  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000a60  00000000  00000000  00002cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000b2c  00000000  00000000  00003736  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001fc  00000000  00000000  00004264  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000929  00000000  00000000  00004460  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000001f0  00000000  00000000  00004d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00004f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000d0  00000000  00000000  00004fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005fae  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00005fb1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005fb5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005fb6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00005fb7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00005fc0  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00005fc9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00005fd2  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  00005fda  2**0
                  CONTENTS, READONLY
 26 .jdi          00005024  00000000  00000000  00006011  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004694a  00000000  00000000  0000b035  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
00004320 l    d  .rodata	00000000 .rodata
00004350 l    d  .rwdata	00000000 .rwdata
00004498 l    d  .bss	00000000 .bss
000044a8 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../audio_nios_bsp//obj/HAL/src/crt0.o
00004068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004350 l     O .rwdata	00000030 AUDIO
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004244 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00004164 g     F .text	0000002c alt_main
000043f4 g       *ABS*	00000000 __flash_rwdata_start
00004190 g     F .text	00000038 alt_putstr
000042c4 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000001c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000044a4 g     O .bss	00000004 errno
0000449c g     O .bss	00000004 alt_argv
0000c3d8 g       *ABS*	00000000 _gp
00004380 g     O .rwdata	00000030 alt_fd_list
000042cc g     F .text	00000038 alt_icache_flush
000043dc g     O .rwdata	00000004 alt_max_fd
000044a8 g       *ABS*	00000000 __bss_end
000043b0 g     O .rwdata	00000028 alt_dev_null
0000422c g     F .text	00000018 alt_dcache_flush_all
000043f4 g       *ABS*	00000000 __ram_rwdata_end
000043e0 g     O .rwdata	00000008 alt_dev_list
000043d8 g     O .rwdata	00000004 JTAG_UART
00004350 g       *ABS*	00000000 __ram_rodata_end
000044a8 g       *ABS*	00000000 end
00006fa0 g       *ABS*	00000000 __alt_stack_pointer
000041f8 g     F .text	00000034 altera_avalon_jtag_uart_write
00004020 g     F .text	0000004c _start
000041e8 g     F .text	00000010 alt_sys_init
00004350 g       *ABS*	00000000 __ram_rwdata_start
00004320 g       *ABS*	00000000 __ram_rodata_start
000044a8 g       *ABS*	00000000 __alt_stack_base
0000424c g     F .text	0000006c alt_dev_llist_insert
00004498 g       *ABS*	00000000 __bss_start
0000406c g     F .text	00000018 main
00004000 g       *ABS*	00000000 __alt_mem_RAM
00004498 g     O .bss	00000004 alt_envp
000043f0 g     O .rwdata	00000004 alt_errno
00004320 g       *ABS*	00000000 __flash_rodata_start
000041c8 g     F .text	00000020 alt_irq_init
000044a0 g     O .bss	00000004 alt_argc
000043e8 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000043f4 g       *ABS*	00000000 _edata
000044a8 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00006fa0 g       *ABS*	00000000 __alt_data_end
0000401c g       .entry	00000000 _exit
00004304 g     F .text	0000001c strlen
000042b8 g     F .text	0000000c alt_icache_flush_all
00004084 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    4000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    4004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    4008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    400c:	00bffd16 	blt	zero,r2,4004 <_gp+0xffff7c2c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4014:	08500814 	ori	at,at,16416
    jmp r1
    4018:	0800683a 	jmp	at

0000401c <_exit>:
    401c:	00000000 	call	0 <__alt_mem_RAM-0x4000>

Disassembly of section .text:

00004020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    4020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    4024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    4028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    402c:	00bffd16 	blt	zero,r2,4024 <_gp+0xffff7c4c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4034:	dedbe814 	ori	sp,sp,28576
    movhi gp, %hi(_gp)
    4038:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    403c:	d6b0f614 	ori	gp,gp,50136
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4044:	10912614 	ori	r2,r2,17560

    movhi r3, %hi(__bss_end)
    4048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    404c:	18d12a14 	ori	r3,r3,17576

    beq r2, r3, 1f
    4050:	10c00326 	beq	r2,r3,4060 <_start+0x40>

0:
    stw zero, (r2)
    4054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    405c:	10fffd36 	bltu	r2,r3,4054 <_gp+0xffff7c7c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4060:	00040840 	call	4084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4064:	00041640 	call	4164 <alt_main>

00004068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4068:	003fff06 	br	4068 <_gp+0xffff7c90>

0000406c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    406c:	01000034 	movhi	r4,0
 */

#include "sys/alt_stdio.h"

int main()
{ 
    4070:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    4074:	2110c804 	addi	r4,r4,17184
 */

#include "sys/alt_stdio.h"

int main()
{ 
    4078:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    407c:	00041900 	call	4190 <alt_putstr>
    4080:	003fff06 	br	4080 <_gp+0xffff7ca8>

00004084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4084:	deffff04 	addi	sp,sp,-4
    4088:	01000034 	movhi	r4,0
    408c:	01400034 	movhi	r5,0
    4090:	dfc00015 	stw	ra,0(sp)
    4094:	2110d404 	addi	r4,r4,17232
    4098:	2950fd04 	addi	r5,r5,17396

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    409c:	2140061e 	bne	r4,r5,40b8 <alt_load+0x34>
    40a0:	01000034 	movhi	r4,0
    40a4:	01400034 	movhi	r5,0
    40a8:	21100804 	addi	r4,r4,16416
    40ac:	29500804 	addi	r5,r5,16416
    40b0:	2140121e 	bne	r4,r5,40fc <alt_load+0x78>
    40b4:	00000b06 	br	40e4 <alt_load+0x60>
    40b8:	00c00034 	movhi	r3,0
    40bc:	18d0fd04 	addi	r3,r3,17396
    40c0:	1907c83a 	sub	r3,r3,r4
    40c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    40c8:	10fff526 	beq	r2,r3,40a0 <_gp+0xffff7cc8>
    {
      *to++ = *from++;
    40cc:	114f883a 	add	r7,r2,r5
    40d0:	39c00017 	ldw	r7,0(r7)
    40d4:	110d883a 	add	r6,r2,r4
    40d8:	10800104 	addi	r2,r2,4
    40dc:	31c00015 	stw	r7,0(r6)
    40e0:	003ff906 	br	40c8 <_gp+0xffff7cf0>
    40e4:	01000034 	movhi	r4,0
    40e8:	01400034 	movhi	r5,0
    40ec:	2110c804 	addi	r4,r4,17184
    40f0:	2950c804 	addi	r5,r5,17184

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    40f4:	2140101e 	bne	r4,r5,4138 <alt_load+0xb4>
    40f8:	00000b06 	br	4128 <alt_load+0xa4>
    40fc:	00c00034 	movhi	r3,0
    4100:	18d00804 	addi	r3,r3,16416
    4104:	1907c83a 	sub	r3,r3,r4
    4108:	0005883a 	mov	r2,zero
  {
    while( to != end )
    410c:	10fff526 	beq	r2,r3,40e4 <_gp+0xffff7d0c>
    {
      *to++ = *from++;
    4110:	114f883a 	add	r7,r2,r5
    4114:	39c00017 	ldw	r7,0(r7)
    4118:	110d883a 	add	r6,r2,r4
    411c:	10800104 	addi	r2,r2,4
    4120:	31c00015 	stw	r7,0(r6)
    4124:	003ff906 	br	410c <_gp+0xffff7d34>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4128:	000422c0 	call	422c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    412c:	dfc00017 	ldw	ra,0(sp)
    4130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4134:	00042b81 	jmpi	42b8 <alt_icache_flush_all>
    4138:	00c00034 	movhi	r3,0
    413c:	18d0d404 	addi	r3,r3,17232
    4140:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4144:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4148:	18bff726 	beq	r3,r2,4128 <_gp+0xffff7d50>
    {
      *to++ = *from++;
    414c:	114f883a 	add	r7,r2,r5
    4150:	39c00017 	ldw	r7,0(r7)
    4154:	110d883a 	add	r6,r2,r4
    4158:	10800104 	addi	r2,r2,4
    415c:	31c00015 	stw	r7,0(r6)
    4160:	003ff906 	br	4148 <_gp+0xffff7d70>

00004164 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4164:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4168:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    416c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4170:	00041c80 	call	41c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4174:	00041e80 	call	41e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4178:	d1a03017 	ldw	r6,-32576(gp)
    417c:	d1603117 	ldw	r5,-32572(gp)
    4180:	d1203217 	ldw	r4,-32568(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4184:	dfc00017 	ldw	ra,0(sp)
    4188:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    418c:	000406c1 	jmpi	406c <main>

00004190 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    4190:	defffe04 	addi	sp,sp,-8
    4194:	dc000015 	stw	r16,0(sp)
    4198:	dfc00115 	stw	ra,4(sp)
    419c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    41a0:	00043040 	call	4304 <strlen>
    41a4:	01000034 	movhi	r4,0
    41a8:	000f883a 	mov	r7,zero
    41ac:	100d883a 	mov	r6,r2
    41b0:	800b883a 	mov	r5,r16
    41b4:	2110f604 	addi	r4,r4,17368
#else
    return fputs(str, stdout);
#endif
#endif
}
    41b8:	dfc00117 	ldw	ra,4(sp)
    41bc:	dc000017 	ldw	r16,0(sp)
    41c0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    41c4:	00041f81 	jmpi	41f8 <altera_avalon_jtag_uart_write>

000041c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    41c8:	deffff04 	addi	sp,sp,-4
    41cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, NIOS);
    41d0:	00042c40 	call	42c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    41d4:	00800044 	movi	r2,1
    41d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    41dc:	dfc00017 	ldw	ra,0(sp)
    41e0:	dec00104 	addi	sp,sp,4
    41e4:	f800283a 	ret

000041e8 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    41e8:	01000034 	movhi	r4,0
    41ec:	d1600204 	addi	r5,gp,-32760
    41f0:	2110d404 	addi	r4,r4,17232
    41f4:	000424c1 	jmpi	424c <alt_dev_llist_insert>

000041f8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    41f8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    41fc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    4200:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4204:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    4208:	2980072e 	bgeu	r5,r6,4228 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    420c:	38c00037 	ldwio	r3,0(r7)
    4210:	18ffffec 	andhi	r3,r3,65535
    4214:	183ffc26 	beq	r3,zero,4208 <_gp+0xffff7e30>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    4218:	28c00007 	ldb	r3,0(r5)
    421c:	20c00035 	stwio	r3,0(r4)
    4220:	29400044 	addi	r5,r5,1
    4224:	003ff806 	br	4208 <_gp+0xffff7e30>

  return count;
}
    4228:	f800283a 	ret

0000422c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    422c:	0005883a 	mov	r2,zero
    4230:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    4234:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4238:	10800804 	addi	r2,r2,32
    423c:	10fffd1e 	bne	r2,r3,4234 <_gp+0xffff7e5c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4240:	f800283a 	ret

00004244 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    4244:	3005883a 	mov	r2,r6
    4248:	f800283a 	ret

0000424c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    424c:	20000226 	beq	r4,zero,4258 <alt_dev_llist_insert+0xc>
    4250:	20800217 	ldw	r2,8(r4)
    4254:	1000101e 	bne	r2,zero,4298 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4258:	d0a00617 	ldw	r2,-32744(gp)
    425c:	10000926 	beq	r2,zero,4284 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4260:	deffff04 	addi	sp,sp,-4
    4264:	dfc00015 	stw	ra,0(sp)
    4268:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    426c:	00c00584 	movi	r3,22
    4270:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    4274:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    4278:	dfc00017 	ldw	ra,0(sp)
    427c:	dec00104 	addi	sp,sp,4
    4280:	f800283a 	ret
    4284:	d0a03304 	addi	r2,gp,-32564
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    4288:	00c00584 	movi	r3,22
    428c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    4290:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    4294:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    4298:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    429c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    42a0:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    42a4:	28800017 	ldw	r2,0(r5)
    42a8:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    42ac:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    42b0:	0005883a 	mov	r2,zero
    42b4:	f800283a 	ret

000042b8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    42b8:	01440004 	movi	r5,4096
    42bc:	0009883a 	mov	r4,zero
    42c0:	00042cc1 	jmpi	42cc <alt_icache_flush>

000042c4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    42c4:	000170fa 	wrctl	ienable,zero
    42c8:	f800283a 	ret

000042cc <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    42cc:	00840004 	movi	r2,4096
    42d0:	1140012e 	bgeu	r2,r5,42d8 <alt_icache_flush+0xc>
    42d4:	100b883a 	mov	r5,r2
    42d8:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    42dc:	2005883a 	mov	r2,r4
    42e0:	1140032e 	bgeu	r2,r5,42f0 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    42e4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    42e8:	10800804 	addi	r2,r2,32
    42ec:	003ffc06 	br	42e0 <_gp+0xffff7f08>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    42f0:	210007cc 	andi	r4,r4,31
    42f4:	20000126 	beq	r4,zero,42fc <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    42f8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    42fc:	0000203a 	flushp
    4300:	f800283a 	ret

00004304 <strlen>:
    4304:	2005883a 	mov	r2,r4
    4308:	10c00007 	ldb	r3,0(r2)
    430c:	18000226 	beq	r3,zero,4318 <strlen+0x14>
    4310:	10800044 	addi	r2,r2,1
    4314:	003ffc06 	br	4308 <_gp+0xffff7f30>
    4318:	1105c83a 	sub	r2,r2,r4
    431c:	f800283a 	ret
